{
	"name": "hebcal",
	"version": "2.1.0-alpha1",
	"author": "Eyal Schachter (https://github.com/Scimonster)",
	"contributors": [
		"Michael J. Radwin (https://github.com/mjradwin)",
		"Danny Sadinoff (https://github.com/dsadinoff)"
	],
	"description": "An easy to use, richly-featured, perpetual Jewish Calendar API",
	"keywords": [
		"hebcal",
		"hebrew",
		"calendar",
		"jewish",
		"holidays",
		"sedra",
		"date",
		"dafyomi",
		"zemanim",
		"zmanim"
	],
	"homepage": "https://github.com/hebcal/hebcal",
	"bugs": "https://github.com/hebcal/hebcal/issues",
	"license": "GPL-3.0+",
	"main": "hebcal.js",
	"dependencies": {
		"suncalc": ""
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/hebcal/hebcal.git"
	},
	"readmeFilename": "README.md",
	"readme": "# Hebcal JavaScript\n\nOriginal C written by Danny Sadinoff, with portions by Michael J. Radwin.\n2014 JavaScript port by Eyal Schachter (age 15).\n\n## Description\n\nHebcal JS is a JavaScript API to aid working with the Hebrew calendar. It is available for both browser and Node.JS.\n\nIt can convert between Hebrew and Gregorian dates, get weekly sedra, holidays, and halachik times (_zemanim_).\n\nYou can include it in a client-side (browser) script with the `client.min.js` script in this directory. It exposes a global variable, `Hebcal`. For Node, install `hebcal` from NPM...\n\n```sh\n$ npm install hebcal\n```\n\n...and include Hebcal with `var Hebcal = require('hebcal');`\n\nHebcal JS is currently at version 2.0. It is approximately equivalent to Hebcal C 3.14.\nI (Eyal) did not write Hebcal JS 1.0. 2.0 is a nearly-complete rewrite of it.\n\nThe version documented here is 2.1.0 alpha.\n\n## Contributors\n\nHebcal JS was ported from C by Eyal Schachter.\n\nThe original C and JavaScript code was written by Danny Sadinoff, with contributions by Michael J. Radwin.\n\n## License\n\nCopyright (C) 1994-2011 Danny Sadinoff\nPortions Copyright (c) 2011 Michael J. Radwin. All Rights Reserved.\n\nHebcal JavaScript is distributed under the GNU Public License version 3. The original Hebcal C is under the GPLv2. The program and its source code may be freely distributed. For details, see the file COPYING in the distribution.\n\nRemember, the GPL means you can't use this in a closed-source program!\n\nIf you are going to use this program, please drop me a line. I'd like to know who you are, what version you're using, and how you're using Hebcal, and anything else you'd like to tell me, so that i can adjust the program to meet users' needs.\n\n# API\n\nThis is where every property and method is listed.\n\n## Information on certain standards\n\n### Descriptions\n\nSometimes a \"description array\" will be mentioned. This is an array with between 1 and 3 properties: `[Sfardit pronounciation[, Ashkenazis pronounciation[, Hebrew spelling]]]`.\n\nMethods that fetch a value from this array expect one of the following strings: \"a\" for Ashkenazis, \"h\", for Hebrew, and anything else for Sfardit.\n\n### Month names\n\nHebcal is not too particular about month names, and only checks up to the second letter. That means that, despite being totally incorrect, \"cheese\" will return the same value as \"cheshvan\". Month names work in both Hebrew and English.\n\nNisan, Iyyar, Sivan, Tamuz, Av, Elul, Tishrei, Cheshvan, Kislev, Tevet, Shvat, Adar (1, 2).\nניסו, אייר, סיון, תמוז, אב, אלול, תשרי, חשון, כסלב, טבת, שבט, אדר (1, 2).\n\n### Sun times\n\nHebcal JS uses the [SunCalc](https://github.com/mourner/suncalc) JavaScript library to calculate sun times. They do not provide an accuracy claim, but i have found their times to be up to 3 minutes off from the accepted times. Do not rely on Zemanim until the last moment!\n\n### Finding location in browser\n\nBoth scripts run on the exact same code, except for one thing. In the browser, Hebcal will attempt to set `Hebcal.defaultLocation` to the user's location using the [geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation) API. The `ready` event (see `Hebcal.events`) is fired once the location has been obtained, or failed to be obtained.\n\nThis will cause any webpages with the Hebcal script to request the user's permission to view their location. If they deny it, the default location will be `[0, 0]`.\n\nTo turn off this feature, use the `client.noloc.min.js` script instead of the usual `client.min.js` script. The unminified version is `client.noloc.js`.\n\n## `Hebcal`\n\nThe global variable (if running in the browser) `Hebcal` is the entrypoint to Hebcal. It is a constructor returning an object represtenting a Hebrew year, and also has many other properties.\n\n```\nnew Hebcal([year[, month]]);\n```\n\n`year`, if provided, should be an `int` representing a Hebrew year, for example, `5774`. If it is falsey (includes `null`, `undefined`, `0`, `false`, etc), it defaults to the current year. If it is not falsy, and not a number, Hebcal will throw an error.\n\n`month`, if provided, supports multiple types:\n\n* String -- The name of a single month.\n* Number -- The number of a single month (Nisan is 1, Tishrei 7).\n* Array -- An array of either of the above two, or mixed. Basically, anything that can be passed to `Hebcal.Month` (see below).\nIf not provided, it defaults to all of the months in the given `year`.\nIf it is a different type, Hebcal will throw an error.\n\nTo get the full current year:\n\n```js\nvar year = new Hebcal();\n```\n\n### Properties on `Hebcal` instances\n\n#### `Hebcal.prototype.year`\n\nNumber. The year represented in the `Hebcal`. (Not actually a prototype value.)\n\n#### `Hebcal.prototype.months`\n\nArray of `Hebcal.Month`s. Is not intended to be used directly, but rather with the `getMonth()` and `map()` methods. (Not actually a prototype value.)\n\n#### `Hebcal.prototype.holidays`\n\nArray of holidays, as `Hebcal.holidays.Event`s, for the represented year. Can be used directly. (Not actually a prototype value.)\n\n#### `Hebcal.prototype.length`\n\nNumber of days in the year. (Not actually a prototype value.)\n\n#### `Hebcal.prototype.il`\n\nBoolean get/set. Whether the current location is in Israel or not. This is relevant with regards to holidays.\nThis gets set by `Hebcal.defaultCity`, and `year.setCity()`. It's possible that you may have to set it yourself in certain circumstances. (Not actually a prototype value.)\n\n#### `Hebcal.prototype.lat` and `long`\n\nNumber get/sets. The latitude and longitude of the current location. This is relevant with regards to getting times for dates. (Not actually prototype values.)\nDefault: 0.\n\n#### `Hebcal.prototype.setCity(city)`\n\n```js\nyear.setCity('Jerusalem');\n```\n\nSets the lat/long to the given city's location. Returns the `Hebcal` it was called upon. This allows for easy method chaining.\n\nFor more information regarding cities, see `Hebcal.cities` below.\n\n#### `Hebcal.prototype.setLocation(latitude, longitude)`\n\n```js\nyear.setLocation(40.716, -74.016); // coords of New York\n```\n\nSets the lat/long to the given location. Returns the `Hebcal` it was called upon.\n\n#### `Hebcal.prototype.isLeapYear()`\n\n```js\nvar isleap = year.isLeapYear();\n```\n\nTakes 0 arguments, returns a boolean.\n\n#### `Hebcal.prototype.next()`\n\n```js\nvar nextYear = year.next();\n```\n\nTakes 0 arguments, returns `Hebcal` representing the following year.\n\n#### `Hebcal.prototype.prev()`\n\n```js\nvar prevYear = year.prev();\n```\n\nTakes 0 arguments, returns `Hebcal` representing the preceding year.\n\n#### `Hebcal.prototype.getMonth(month)`\n\n```js\nvar tishrei = year.getMonth(7);\nvar adar2 = year.getMonth(-1);\nvar shvat = year.getMonth('shvat');\nvar elul = year.getMonth('אלול');\nvar nextNisan = year.getMonth(13); // in a non-leap year\n```\n\nTakes a single argument, the month to get. Returns `Hebcal.Month` representing the requested month.\n\nIf the month is a positive number, it is a month index. Remember, Nisan is 1, Tishrei 7.\nIf the month is a negative number, it is a month index from the end of the year.\nIf the month is a string, it can be a month name in Hebrew or English.\n\n#### `Hebcal.prototype.getDay(day)`\n\nTakes a single argument, the day to get. `day` should be a number representing the number of days from Nisan 1. Nisan 1 is 1, Rosh Hashanah is usually a little above 200, but it can vary. Returns a `Hebcal.HDate` representing the requested day.\n\nIf the day is a positive number, it is a day index.\nIf the day is a negative number, it is a day index from the end of the year. So, 1 would be the 29th of Elul.\n\n#### `Hebcal.prototype.map(mapFunc[, thisArg])`\n\nIn 2.0: A shortcut for `year.months.map(mapFunc, [thisArg])`.\n\nIn 2.1 and beyond: Map over each day in the year, calling `mapFunc` in context of `thisArg`.\n\n#### `Hebcal.prototype.addHoliday(event)`\n\nAdd a holiday to the list of holidays. Throws an error if `event` is not a `Hebcal.holidays.Event`. Returns the `Hebcal` it was called upon.\n\n```js\nyear.addHoliday(new Hebcal.holidays.Event(new Date(2014,0,1), 'New Years Day', Hebcal.holidays.masks.USER_EVENT));\n```\n\nSee `Hebcal.holidays` for more information on creating an event.\n\n#### `Hebcal.prototype.find()`\n\nA \"magical\" method that allows finding dates in the year. It supports several types of arguments, and is extensible. Returns an array of `Hebcal.HDate`s.\n\nIf called with a single argument:\n\n* `Hebcal.HDate`: Find that Hebrew date in the year. This is useful, because getting a date specifically from the year, and not recreating it, gives it a few additional properties, such as a pre-set location, and a reference to the containing year.\n* `Date`: Find that Gregorian date in the year.\n* `Array`: An array of acceptible arguments to `year.find()`. If an item is an array, it is treated as passing multiple arguments to `find()`.\n* `String`: A description of a date. See `find.strings` below.\n\nIf called with two arguments: the first represents a day, or list of days, in a month; and the second represents a month, or list of months.\nThe day is anything that can be passed to `Hebcal.Month.prototype.find()` (see below).\nIf the month is a:\n\n* `Hebcal.Month`: Search for the day in that month. This is usually used only internally; it's more user-friendly to use one of the other types.\n* `Number`: A number to be given to `Hebcal.prototype.getMonth()`.\n* `String`: A month name.\n* `Array`: An array of any of the above, mixed as you please.\n\n##### `Hebcal.prototype.find.strings`\n\nThis is technically a function for internal use, but it also serves as the extension point for passing strings. Simply set a property on it, and that can be used as a string to `Hebcal.prototype.find()`.\nTo let the passed string be more user-friendly, the following conversions are done: convert to lowercase; replace spaces with underscores. This means that \"rosh chodesh\", \"Rosh Chodesh\", and \"ROSH_CHODESH\" all evaluate to \"rosh_chodesh\".\n\nThe following properties are defined by default:\n\n* `rosh_chodesh` (all roshei chodashim in the year)\n* `holidays` (days with a holiday defined in `year.holidays`)\n* `omer` (days in sefirat ha'omer)\n* `pesach`\n* `sukkot` (aliased as `sukkos`, `succot`, `succos`)\n* `shavuot` (aliased as `shavuos`)\n* `rosh_hashana` (aliased as `rosh_hashanah`)\n* `today`\n* `yesterday`\n* `tomorrow`\n\nTo extend the list, add a property of `Hebcal.prototype.find.strings`. The name should be all lowercase, and spaces replaced with underscores, as described above. The property itself should be a function taking a no arguments. Within the function, `this` refers to the object that `find()` is being called on. It should return an Array. It is perfectly acceptible to return the result of another `find()` call.\n\n## `Hebcal.addZeman(zeman, func)`\n\nAn alias of `Hebcal.HDate.addZeman`. See there.\n\n## `Hebcal.cities`\n\nGet locations for several cities around the world.\n\n### `Hebcal.cities.getCity(cityName)`\n\nReturns an array describing the location of a city, or an array of `0`s if the city wasn't found. This array is intended to be passed to `Hebcal.cities.getLocation()`.\n\n`[latdeg, latmins, longdeg, longmins, Israel]`\n\n### `Hebcal.cities.getLocation(cityInfo)`\n\nIs intended to receive the return value of `getCity()`. Returns an object containing 2 properties: `lat` and `long`, with the numbers in degrees, including minutes.\n\nAn end-user should rarely need either of these; they are mainly used by `Hebcal.defaultCity` and `Hebcal.setCity()` and the methods they call.\n\n### `Hebcal.cities.listCities()`\n\nReturn an array containing the names of all supported cities.\n\n### `Hebcal.cities.addCity(city, info)`\n\nAdd a city to the list of cities. The first argument should be the name, the second an array of the kind that `getCity()` returns.\nThis method does not return anything.\n\n### `Hebcal.cities.nearest(lat, long)`\n\nReturn the name of the city nearest to the given coordinates.\n\nThe coordinates can be given either as numbers, or as arrays of `[deg, mins]`.\n\n## `Hebcal.defaultCity`\n\nString get/set. The nearest city to `Hebcal.defaultLocation`.\n\n## `Hebcal.defaultLocation`\n\nArray of coordinates that are used as the default location when creating a new instance of `Hebcal` or `Hebcal.HDate`.\n\n`[latdeg, longdeg]`\n\n## `Hebcal.holidays`\n\nA holiday/event interface.\n\n### `Hebcal.holidays.masks`\n\nAn object containing bitmasks for use when creating a `Hebcal.holidays.Event`.\n\n```js\nmasks.USER_EVENT          = 1;\nmasks.LIGHT_CANDLES       = 2;\nmasks.YOM_TOV_ENDS        = 4;\nmasks.CHUL_ONLY           = 8; // chutz l'aretz (Diaspora)\nmasks.IL_ONLY             = 16; // b'aretz (Israel)\nmasks.LIGHT_CANDLES_TZEIS = 32;\n```\n\n### `Hebcal.holidays.IGNORE_YEAR`\n\nA constant to be passed to both `Date` and `Hebcal.HDate` constructors. It means run this holiday every year, not just one specific year. It is automatically applied to Gregorian dates.\n\n### `new Hebcal.holidays.Event(date, desc[, masks])`\n\nA constructor for Events. This is meant to be added to a holidays list.\n\n`date` can be either a Gregorian `Date` object or a `Hebcal.HDate` object. If Gregorian, `Hebcal.holidays.IGNORE_YEAR` is assumed.\n\n`desc` can be a description array, or string. A description array looks like: `[Sfardit pronounciation[, Ashkenazis pronounciation[, Hebrew spelling]]]`. If the Sfardit and Ashkenazis are the same, pass `null` for Ashkenazis.\n\n`masks` should be a bitmask of the items in `Hebcal.holidays.masks`. I.e. `Hebcal.holidays.masks.IL_ONLY | Hebcal.holidays.masks.YOM_TOV_ENDS`.\n\n#### `Hebcal.holidays.Event.prototype.date`\n\nA `Hebcal.HDate` representing the date passed to the constructor. (Not actually a prototype value.)\n\n#### `Hebcal.holidays.Event.prototype.desc`\n\nAn Array, either the array passed as `desc`, or the string passed, wrapped in an array. (Not actually a prototype value.)\n\n#### `Hebcal.holidays.Event.prototype.IGNORE_YEAR`\n\nBoolean, whether or not we ignore the year of the date. Always true for Gregorian dates.\n\n#### `Hebcal.holidays.Event.prototype.USER_EVENT`\n#### `Hebcal.holidays.Event.prototype.LIGHT_CANDLES`\n#### `Hebcal.holidays.Event.prototype.YOM_TOV_ENDS`\n#### `Hebcal.holidays.Event.prototype.CHUL_ONLY`\n#### `Hebcal.holidays.Event.prototype.IL_ONLY`\n#### `Hebcal.holidays.Event.prototype.LIGHT_CANDLES_TZEIS`\n\nBooleans, whether or not the bitmasks for those values were provided. (Not actually prototype values.)\n\n#### `Hebcal.holidays.Event.prototype.is([date[, il]])`\n\nReturns a Boolean, whether or not the event applies for a given date.\n\n`date`, if provided, can be a `Hebcal.HDate` or a Gregorian `Date`. If undefined, defaults to the current date.\n\n`il`, if provided, should be a Boolean whether or not you are in Israel. If undefined, defaults to the value of `Hebcal.holidays.Event.isIL`.\n\n#### `Hebcal.holidays.Event.prototype.masks()`\n\nReturns a number representing the original bitmask passed to the constructor.\n\n#### `Hebcal.holidays.Event.prototype.getDesc(o)`\n\nReturns a string of the description. `o` can be one of the standard language strings.\n\n#### `Hebcal.holidays.Event.prototype.candleLighting()`\n\nReturn a `Date` object representing the candle-lighting time for an event, if applicable. Otherwise, returns null.\n\nThe number of minutes before sunset can be customized with the `Hebcal.holidays.Event.candleLighting` property.\n\n#### `Hebcal.holidays.Event.prototype.havdalah()`\n\nReturn a `Date` object representing the havdalah time for an event, if applicable. Otherwise, returns null.\n\nThe number of minutes after sunset can be customized with the `Hebcal.holidays.Event.havdalah` property.\n\n#### `Hebcal.holidays.Event.isIL`\n\nBoolean, are we in Israel? Is not automatically set. Default `false`.\n\n#### `Hebcal.holidays.Event.candleLighting`\n\nThe number of minutes before sunset to light candles. Defaults to 18.\n\n#### `Hebcal.holidays.Event.havdalah`\n\nThe number of minutes after sunset to make havdalah. Defaults to 50.\n\n### `Hebcal.holidays.standards`\n\nArray of standard holidays that do not change based on years. Is used internally, and exported only incidentally.\n\n### `Hebcal.holidays.getHolidaysForYear(year)`\n\nReturns an array of all holidays for the year, including variable ones. Is used internally, and exported only incidentally.\n\n## `Hebcal.candleLighting`\n\nAn alias of `Hebcal.holidays.Event.candleLighting`.\n\n## `Hebcal.havdalah`\n\nAn alias of `Hebcal.holidays.Event.havdalah`.\n\n## `Hebcal.gematriya(string | num[, limit])`\n\nReturn a gematriya string from a number, or a number from a string. Is imperfect above 1000.\n\nThe `limit` parameter can be a number, which is how many digits to truncate the original number to. Digits are removed from the beginning.\n\n```js\nHebcal.gematriya(5774, 3) === 'תשע\"ד' // first converted to 774\nHebcal.gematriya(5774) === 'התשע\"ד'\nHebcal.gematriya(5) === \"ה'\"\nHebcal.gematriya('התשע\"ד') === 5774 // the ה before a high number means 5000\nHebcal.gematriya('ה\"ד') === 9 // just adds them up\nHebcal.gematriya(1234) === 'תתררל\"ד'\n```\n\n## `Hebcal.range(start, end[, step])`\n\nReturn an array containing numbers between `start` and `end`, at an interval of `step`. Can be useful with `find()`, for fetching a bunch of days.\n\n`step` defaults to 1 if not provided.\n\n```js\nHebcal.range(1, 10) // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nHebcal.range(1, 10, 2) // [1, 3, 5, 7, 9]\nHebcal.range(15, 1, 3) // [15, 12, 9, 6, 3]\nHebcal.range(1, 2, 0.25) // [1, 1.25, 1.5, 1.75, 2]\n```\n\n## `new Hebcal.Month(month, year)`\n\nThis constructor contains information on a Hebrew month. It is not intended to be directly constructed, but it is fetched by `Hebcal.prototype.getMonth()`, so is useful to the end-user.\n\n```js\nvar month = new Hebcal.Month(7, 5774); // Tishrei\nvar month = new Hebcal.Month('Tishrei', 5774); // Tishrei\n```\n\n`month` can be a month name or number; `year` must be a number. An error is thrown if one of these conditions is not met.\n\n### `Hebcal.Month.prototype.month`\n\nA number representing the `month` argument to the constructor. (Not actually a prototype value.)\n\n### `Hebcal.Month.prototype.year`\n\nA number representing the `year` argument to the constructor. (Not actually a prototype value.)\n\n### `Hebcal.Month.prototype.days`\n\nAn array of days in the month. Each day is an instance of `Hebcal.HDate`. (Not actually a prototype value.)\n\n### `Hebcal.Month.prototype.length`\n\nNumber; the length of the month. Equivalent to the length of the `days` array. (Not actually a prototype value.)\n\n### `Hebcal.Month.prototype.il`\n\nBoolean get/set. Whether or not the location is in Israel. Is usually set by the parent year. (Not actually a prototype value.)\n\n### `Hebcal.Month.prototype.lat`, `Hebcal.Month.prototype.long`\n\nNumber get/set. Latitude/Longitude of the location. Is usually set by the parent year. (Not actually prototype values.)\n\n### `Hebcal.Month.prototype.__year`\n\nInternal, non-enumerable. A reference to the containing year. Only set if the month was created by a `Hebcal()`. (Not actually a prototype value.)\n\n### `Hebcal.Month.prototype.isLeapYear()`\n\nReturns a Boolean, whether or not the year is a leap year.\n\n### `Hebcal.Month.prototype.prev()`\n\nReturns a `Hebcal.Month` representing the previous month.\n\n### `Hebcal.Month.prototype.next()`\n\nReturns a `Hebcal.Month` representing the following month.\n\n### `Hebcal.Month.prototype.getDay(day)`\n\nReturns a `Hebcal.HDate` at a 1-based index in the month. Negative indices are from the end of the month.\n\n### `Hebcal.Month.prototype.getYearObject()`\n\nReturns `this.__year` internal value.\n\n### `Hebcal.Month.prototype.getName(o)`\n\nReturns a string with the name of the month. Takes a standard options string.\n\n### `Hebcal.Month.prototype.rosh_chodesh()`\n\nReturns an array containing `Hebcal.HDate`s for that month's Rosh Chodesh. Returns an array whether Rosh Chodesh is one or two days.\n\n### `Hebcal.Month.prototype.map(mapFunc[, thisArg])`\n\nA shortcut for `month.days.map(mapFunc, [thisArg])`.\n\n### `Hebcal.Month.prototype.find(day)`\n\nA method similar to `Hebcal.prototype.find()` (see there), but specifically for a single month.\n\nIf `day` is a number, it is a 1-based index in the month. String, `Hebcal.HDate`, `Date`, and Array rules are the same as for `Hebcal.prototype.find()`.\n\nDefault strings are:\n\n* `rosh_chodesh`: Same as `Hebcal.Month.prototype.rosh_chodesh()`\n* `shabbat_mevarchim` (aliased as `shabbos_mevarchim`): The last Shabbat in the month.\n\nStrings are extensible in the same manner: Add a property of `Hebcal.Month.prototype.find.strings`. Name conversion rules and function context apply the same as with `Hebcal.prototype.find()`.\n\n`find()` returns an array of `Hebcal.HDate`s.\n\nThis method is sometimes called by `Hebcal.prototype.find()`.\n\n## `new Hebcal.HDate([day[, month[, year]]])`\n\nAn `HDate` represents a Hebrew date.\n\n`HDate` supports multiple types.\n\nIf 0 arguments are passed, or only one is and it is undefined, return an `HDate` object representing the current date.\n\n```js\nvar day = new Hebcal.HDate();`\n```\n\nIf 1 argument is passed:\n\n* Gregorian `Date`: An `HDate` object representing that date. If the date is after sunset, it is the next day.\n* `HDate`: Clone the object.\n* String: Split the string by whitespace, and parse that.\n* Number: Number of days since December 31, 1 BCE.\n\n```js\nvar day = new Hebcal.HDate(new Date(2014, 0, 1));\nvar day = new Hebcal.HDate('1 Tishrei 5774');\nvar day = new Hebcal.HDate('15 Adar 2 5774');\n```\n\nIf 2: An `HDate` with the given `day` and `month`, and the current year.\n\n```js\nvar day = new Hebcal.HDate(15, 1); // Pesach\nvar day = new Hebcal.HDate(\"ו'\", \"סיון\");\n```\n\nIf 3: Numbers, or a month name for the second argument. Days and months are 1 based. If any values are out of range, e.g. the 31st of Nisan, convert them to proper values, i.e. 1st of Iyyar.\n\n```js\nvar day = new Hebcal.HDate(7, 2, 5770);\nvar day = new Hebcal.HDate(40, 'elul', 5773); // 11 Tishrei 5774\n```\n\n`Hebcal.HDate` will throw an error if bad arguments are passed.\n\nThe location will be set to `Hebcal.defaultLocation`.\n\n### `Hebcal.HDate.prototype.year`\n\nNumber. The year passed to the constructor, possibly fixed up. It is preferred to get this value with `Hebcal.HDate.prototype.getFullYear()`. (Not actually a prototype value.)\n\n### `Hebcal.HDate.prototype.month`\n\nNumber. The month passed to the constructor, possibly fixed up. It is preferred to get this value with `Hebcal.HDate.prototype.getMonth()`. (Not actually a prototype value.)\n\n### `Hebcal.HDate.prototype.day`\n\nNumber. The day passed to the constructor, possibly fixed up. It is preferred to get this value with `Hebcal.HDate.prototype.getDate()`. (Not actually a prototype value.)\n\n### `Hebcal.HDate.prototype.lat`\n### `Hebcal.HDate.prototype.long`\n\nNumbers. The latitude/longitude of the location. These default to the values of `Hebcal.defaultLocation`. (Not actually prototype values.)\n\n### `Hebcal.HDate.prototype.il`\n\nBoolean. Whether the current location is in Israel or not. This is relevant with regards to holidays.\nThis gets set by `Hebcal.defaultCity`, and `day.setCity()`. It's possible that you may have to set it yourself in certain circumstances. (Not actually a prototype value.)\n\n### `Hebcal.HDate.prototype.__month`\n\nInternal, non-enumerable. A reference to the containing month. Only set if the day was created by a `Hebcal.Month()`. (Not actually a prototype value.)\n\n### `Hebcal.HDate.prototype.getFullYear()`\n\nNumber. The year of the date.\n\n### `Hebcal.HDate.prototype.getMonth()`\n\nNumber. The month of the date. 1 is Nisan, 7 is Tishrei, 13 is Adar B.\n\n### `Hebcal.HDate.prototype.getTishreiMonth()`\n\nNumber. The Tishrei-based month of the date. 1 is Tishrei, 7 is Nisan, 13 is Elul in a leap year.\n\n### `Hebcal.HDate.prototype.daysInMonth()`\n\nNumber. The number of days in the month.\n\n### `Hebcal.HDate.prototype.getDate()`\n\nNumber. The day of the month of the date.\n\n### `Hebcal.HDate.prototype.getDay()`\n\nNumber. The day of the week of the date. 0 is Sunday, as with `Date.prototype.getDay()`.\n\n### `Hebcal.HDate.prototype.setFullYear(year)`\n\nSets the year of the date. Returns the object it was called upon.\n\n### `Hebcal.HDate.prototype.setMonth(month)`\n\nSets the month of the date. Returns the object it was called upon.\n\n### `Hebcal.HDate.prototype.setTishreiMonth(month)`\n\nSets the Tishrei-based month of the date. Returns the object it was called upon.\n\n### `Hebcal.HDate.prototype.setDate(date)`\n\nSets the day of the month of the date. Returns the object it was called upon.\n\n### `Hebcal.HDate.prototype.greg()`\n\nReturns a `Date` object with the Gregorian date of the Hebrew date. The time is midnight.\n\n### `Hebcal.HDate.prototype.gregEve()`\n\nReturns a `Date` object with the Gregorian date of the start of the Hebrew date, the previous evening. The time is sunset.\n\n### `Hebcal.HDate.prototype.abs()`\n\nReturn a number representing the number of days since December 31, 1 BCE, an \"absolute date\".\n\n### `Hebcal.HDate.prototype.toString(o)`\n\nReturn a string with the current day, month, and year. Takes a standard language options string.\n\n```js\nnew Hebcal.HDate().toString() // 16 Adar I 5774\nnew Hebcal.HDate(1,7,5769).toString() // 1 Tishrei 5769\nnew Hebcal.HDate(15,1,5773).toString('h') // ט\"ו ניסן התשע\"ג\n```\n\n### `Hebcal.HDate.prototype.getMonthName(o)`\n\nReturn a string of the current month name. Takes a standard language options string.\n\n### `Hebcal.HDate.prototype.getSedra(o)`\n\nReturn an array of strings with the parshiot read on Shabbat, or a special event that takes precedence. Takes a standard language options string. Ashkenazis names for parshiot are not currently supported.\n\n```js\nnew Hebcal.HDate(24,12,5773).getSedra() // [ 'Vayakhel', 'Pekudei' ]\nnew Hebcal.HDate(18,1,5774).getSedra() // [ 'Chol hamoed Pesach' ]\nnew Hebcal.HDate(12,6,5774).getSedra() // [ 'Ki Tavo' ]\nnew Hebcal.HDate(15,7,5774).getSedra('a') // [ 'Chol hamoed Succos' ]\nnew Hebcal.HDate(19,12,5773).getSedra() // [ 'Ki Tisa' ]\nnew Hebcal.HDate(19,12,5773).getSedra('a') // [ 'Ki Tisa' ]\nnew Hebcal.HDate(8,8,5774).getSedra('h') // [ 'לך-לך' ]\n```\n\n### `Hebcal.HDate.prototype.setCity(city)`\n\nSet the location to the coordinates of a given city. For more about cities, see `Hebcal.cities`. Returns the object it was called upon.\n\n### `Hebcal.HDate.prototype.setLocation(lat, long)`\n\nSet the location to the given coordinates. Returns the object it was called upon.\n\n`lat` and `long` can be numbers, the coordinates in degrees, or arrays, `[deg, mins]`.\n\n### `Hebcal.HDate.prototype.sunrise()`\n\nReturns a `Date` with the sunrise time for the day. This is calculated based on the location. Please read the SunCalc disclaimer.\n\n### `Hebcal.HDate.prototype.sunset()`\n\nReturns a `Date` with the sunset time for the day. This is calculated based on the location. Please read the SunCalc disclaimer.\n\n### `Hebcal.HDate.prototype.hour()`\n\nReturns the number of milliseconds in a halachik hour (sha'a zmaniya). This is intended mostly for internal use.\n\n### `Hebcal.HDate.prototype.hourMins()`\n\nReturns the number of minutes in a halachik hour (sha'a zmaniya). This is more useful for most people than milliseconds.\n\n### `Hebcal.HDate.prototype.nightHour()`\n\nReturns the number of milliseconds in a halachik hour for the night. This is intended mostly for internal use.\n\n### `Hebcal.HDate.prototype.nightHourMins()`\n\nReturns the number of minutes in a halachik hour for the night. This is more useful for most people than milliseconds.\n\n### `Hebcal.HDate.prototype.getZemanim()`\n\nReturns an object containing halachik times (zemanim) for the day. Each property is a `Date` object. By default, these are:\n\n* `chatzot` (calculated as sunrise + six hours)\n* `chatzot_night` (calculated as sunset + six hours)\n* `alot_hashacher` (calculated as when the sun is at -16.1 degrees, as per [MyZmanim.com](http://www.myzmanim.com/read/degrees.aspx))\n* `misheyakir` (calculated as when the sun is at -11.5 degrees, as per [MyZmanim.com](http://www.myzmanim.com/read/sources.aspx))\n* `misheyakir_machmir` (calculated as when the sun is at -10.2 degrees, as per [MyZmanim.com](http://www.myzmanim.com/read/sources.aspx))\n* `neitz_hachama` (the same as sunrise, but allows an event to be fired (added 2.1))\n* `sof_zman_shma` (calculated as sunrise + 3 hours, according to the Gra and Baal HaTanya)\n* `sof_zman_tfilla` (calculated as sunrise + 4 hours, according to the Gra and Baal HaTanya)\n* `mincha_gedola` (calculated as sunrise + 6.5 hours)\n* `mincha_ketana` (calculated as sunrise + 9.5 hours)\n* `plag_hamincha` (calculated as sunrise + 10.75 hours)\n* `shkiah` (the same as sunset, but allows an event to be fired (added 2.1))\n* `tzeit` (calculated as when the sun is at -8.5 degrees, as per [MyZmanim.com](http://www.myzmanim.com/read/sources.aspx))\n\nYou can add a zeman to be returned with `Hebcal.HDate.addZeman()` (aliased as `Hebcal.addZeman()`).\n\n### `Hebcal.HDate.prototype.next()`\n\nReturn tomorrow. Or rather, an `HDate` representing the next day.\n\nIf part of a `Hebcal()` year, return the day from the year. Otherwise, return a new object. (The difference is mainly with location, and back-reference to the month/year).\n\n### `Hebcal.HDate.prototype.prev()`\n\nReturn yesterday. Or rather, an `HDate` representing the previous day.\n\nIf part of a `Hebcal()` year, return the day from the year. Otherwise, return a new object. (The difference is mainly with location, and back-reference to the month/year).\n\n### `Hebcal.HDate.prototype.isSameDate(otherHDate)`\n\nReturns a Boolean whether or not the two dates represent the same day.\n\n### `Hebcal.HDate.prototype.before(dayNumber)`\n\nReturns an `HDate` representing the last day `dayNumber` before the current date. Sunday is 0, Saturday 6.\n\n```js\nnew Hebcal.HDate(new Date('Wednesday February 19, 2014')).before(6).greg() // Sat Feb 15 2014\n```\n\n### `Hebcal.HDate.prototype.nearest(dayNumber)`\n\nReturns an `HDate` representing the nearest `dayNumber` to the current date. Sunday is 0, Saturday 6.\n\n```js\nnew Hebcal.HDate(new Date('Wednesday February 19, 2014')).nearest(6).greg() // Sat Feb 22 2014\nnew Hebcal.HDate(new Date('Tuesday February 18, 2014')).nearest(6).greg() // Sat Feb 15 2014\n```\n\n### `Hebcal.HDate.prototype.onOrAfter(dayNumber)`\n\nReturns an `HDate` representing the a `dayNumber` on or after the current date. Sunday is 0, Saturday 6.\n\n```js\nnew Hebcal.HDate(new Date('Wednesday February 19, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\nnew Hebcal.HDate(new Date('Saturday February 22, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\nnew Hebcal.HDate(new Date('Sunday February 23, 2014')).onOrAfter(6).greg() // Sat Mar 01 2014\n```\n\n### `Hebcal.HDate.prototype.after(dayNumber)`\n\nReturns an `HDate` representing the the first `dayNumber` after the current date. Sunday is 0, Saturday 6.\n\n```js\nnew Hebcal.HDate(new Date('Wednesday February 19, 2014')).after(6).greg() // Sat Feb 22 2014\nnew Hebcal.HDate(new Date('Saturday February 22, 2014')).after(6).greg() // Sat Mar 01 2014\nnew Hebcal.HDate(new Date('Sunday February 23, 2014')).after(6).greg() // Sat Mar 01 2014\n```\n\n### `Hebcal.HDate.prototype.getMonthObject()`\n\nReturn `this.__month` internal.\n\n### `Hebcal.HDate.prototype.getYearObject()`\n\nCall `getYearObject()` of `this.getMonthObject()`.\n\n### `Hebcal.HDate.prototype.getGregMonthObject()`\n\nReturn `this.__gregmonth` internal. This method was added in Hebcal JS 2.1.\n\n### `Hebcal.HDate.prototype.getGregYearObject()`\n\nCall `getYearObject()` of `this.getGregMonthObject()`. This method was added in Hebcal JS 2.1.\n\n### `Hebcal.HDate.prototype.holidays()`\n\nReturn an array containing `Hebcal.holidays.Event`s applying to the current day.\n\n### `Hebcal.HDate.prototype.omer()`\n\nReturn a number representing the day of Sefirat Omer. Returns 0 if not during Sefirah.\n\n```js\nnew Hebcal.HDate(20, 'iyyar').omer() // 35\nnew Hebcal.HDate(16, 'nisan').omer() // 1\nnew Hebcal.HDate(15, 'nisan').omer() // 0\n```\n\n### `Hebcal.HDate.prototype.dafyomi(o)`\n\nReturn a string containing the day's Daf Yomi. Takes a standard language options string.\n\n```js\nnew Hebcal.HDate(15, 'nisan', 5774).dafyomi() // Beitzah 16\nnew Hebcal.HDate(15, 'elul', 5772).dafyomi('a') // Berachos 30\n```\n\n### `Hebcal.HDate.prototype.tachanun()`\n\nReturn a bitmask containing information on what Tachanun (or Tzidchatcha on Shabbat) is said on that day.\n\nTachanun is not said on Rosh Chodesh, the month of Nisan, Lag Baomer, Rosh Chodesh Sivan until Isru Chag, Tisha B'av, 15 Av, Erev Rosh Hashanah, Rosh Hashanah, Erev Yom Kippur until after Simchat Torah, Chanukah, Tu B'shvat, Purim and Shushan Purim, and Purim and Shushan Purim Katan.\n\nIn some congregations Tachanun is not said until from Rosh Chodesh Sivan until 14th Sivan, Sukkot until after Rosh Chodesh Cheshvan, Pesach Sheini, Yom Ha'atzmaut, and Yom Yerushalayim.\n\nTachanun is not said at Mincha on days before it is not said at Shacharit. Tachanun is not said at Shacharit on Shabbat, but is at Mincha, usually.\n\nThe bitmask is made up of the following values:\n\n* 0 - No Tachanun, according to everybody\n* 1 - Tachanun is said at Mincha\n* 2 - Tachanun is said at Shacharit\n* 4 - All congregations say Tachanun on the day\n\nThese bitmasks are also available as properties of the function:\n\n* `tachanun.NONE = 0`\n* `tachanun.MINCHA = 1`\n* `tachanun.SHACHARIT = 2`\n* `tachanun.ALL_CONGS = 4`\n\nHowever, due to the uncomfortableness of typing `Hebcal.HDate.prototype.tachanun.*BITMASK*`, it may be easier to just use the values directly.\n\n### `Hebcal.HDate.prototype.hallel()`\n\nReturn a number containing information on what Hallel is said on that day.\n\nWhole Hallel is said on Chanukah, the first Yom Tov of Pesach, Shavuot, Sukkot, Yom Ha'atzmaut, and Yom Yerushalayim.\n\nHalf Hallel is said on Rosh Chodesh (not Rosh Hashanah), and the last 6 days of Pesach.\n\nThe number is one of the following values:\n\n* 0 - No Hallel\n* 1 - Half Hallel\n* 2 - Whole Hallel\n\nThese values are also available as properties of the function:\n\n* `hallel.NONE = 0`\n* `hallel.HALF = 1`\n* `hallel.WHOLE = 2`\n\nHowever, due to the uncomfortableness of typing `Hebcal.HDate.prototype.hallel.*BITMASK*`, it may be easier to just use the values directly.\n\n### `Hebcal.HDate.defaultLocation`\n\nAn alias of `Hebcal.defaultLocation`.\n\n### `Hebcal.HDate.defaultCity`\n\nAn alias of `Hebcal.defaultCity`.\n\n### `Hebcal.HDate.hebrew2abs(hdate)`\n\nReturn an absolute date from an `HDate`. Equivalent to `Hebcal.HDate.prototype.abs()`.\n\n### `Hebcal.HDate.abs2hebrew(absdate)`\n\nReturn an `HDate` from absolute date. Equivalent to `new Hebcal.HDate(absdate)`.\n\n### `Hebcal.HDate.addZeman(zeman, func)`\n\nAdd a zeman to the object of times returned by `Hebcal.HDate.prototype.getZemanim()`. This function is aliased as `Hebcal.addZeman()`.\n\n`zeman` should be the name of the zeman; `func` should be a function taking one parameter, the `HDate` to get the zeman for. `func` should return a `Date` object with the time.\n\n## `Hebcal.ready` (client-side only)\n\nBoolean; whether the geolocating code has completed or failed yet. If using the noloc script, it is always true.\n\n## `Hebcal.onready()` (client-side only, deprecated 2.1)\n\nSet this to a function to be executed when geolocation has finished. Is called immediately upon being set in a no-loc environment.\n\nThis function is liable to be buggy.\n\nThis has been replaced as of Hebcal 2.1 with the `ready` event (see below). It will still work, but it is preferable not to use it.\n\n## `Hebcal.events`\n\nA bunch of Hebcal-related events. This object is an instance of Node's [`events.EventEmitter`](http://nodejs.org/api/events.html). See there for methods.\n\nJust a quick overview in case you don't feel like looking there right now:\n\n```js\nHebcal.events.on('locationChange', function(oldloc){\n\tconsole.log('moved from '+oldloc+' to '+Hebcal.defaultLocation);\n});\nHebcal.events.removeListener('locationChange', Hebcal.events.listeners('locationChange')[0]);\n```\n\nThis property is new in Hebcal 2.1.\n\n### `Hebcal.events.refreshInterval`\n\nNumber get/set. How often, in milliseconds, to check for zemanim and day changes.\nUpon being set, it updates the time of the interval.\nDefaults to 300000, which is 5 minutes.\nIf set to 0, disables checking.\n\n### `Hebcal.events.beforeZeman`\n\nNumber. If it is under this number of milliseconds before a zeman, call the `almostZeman` event.\nDefaults to 600000, which is 10 minutes.\n\n### `Hebcal.events.customs`\n\nObject of custom events, default empty. Each key in the object should be the name of a custom event, the property a `Date` object or UNIX timestamp number.\n\nA `custom` event will be fired when the date reaches one of these times.\n\nI figured that as long as i was building in time-based alerts, i could add this.\n\n### Events that can be emitted\n\n#### `ready` (client-side only)\n\nFires when geolocating finished. If it is only set after geolocation finishes, all `ready` events are called then.\n\n#### `locationChange`\n\nFires when the location is set using `Hebcal.defaultLocation` or `Hebcal.defaultCity`. WARNING: it does not fire when using `Hebcal.HDate.defaultLocation` or `Hebcal.HDate.defaultCity`.\n\n#### `dayChange`\n\nFires at sunset. Sunset is calculated according to `Hebcal.defaultLocation`.\n\n#### `almostZeman(zeman, msUntil)`\n\nFires when it is almost a zeman. Almost is if the current time is less than `Hebcal.events.beforeZeman` milliseconds until a zeman. Zemanim are calculated according to `Hebcal.defaultLocation`.\n\nThe callback function for this event is passed two parameters: the name of the zeman, and the number of milliseconds until it occurs (approximately).\n\n#### `atZeman(zeman)`\n\nFires when the time is at a zeman. Zemanim are calculated according to `Hebcal.defaultLocation`. This is not precise; rather, it fires if there will not be another check before the zeman passes.\n\nThe callback function for this event is passed one parameter: the name of the zeman.\n\n#### `custom(time)`\n\nFires when the time is at a custom breakpoint. This is not precise; rather, it fires if there will not be another check before the time passes.\n\nThe callback function for this event is passed one parameter: the name of the custom event.\n\n## `new Hebcal.GregYear([year[, month]])`\n\nA constructor similar to `new Hebcal()`, but instead of being based on Hebrew years, `GregYear` is based on a Gregorian year. This property was added in Hebcal JS 2.1.\n\n`year`, if provided, should be a number representing a Gregorian year, for example, `2014`.\nIf it is falsey (includes `null`, `undefined`, `0`, `false`, etc), it defaults to the current year.\n\nIf it is a string, it can either be just a number with the year, or a year number and month. Anything that `new Date()` accepts works. For example, all of the following evaluate to February 2014: `2014-2`, `2014 Feb`, `2014/02`, `February 2014`.\n\nIf it is not falsy, and not a number or string, Hebcal will throw an error.\n\n`month`, if provided, supports multiple types:\n\n* String -- The name of a single month.\n* Number -- The number of a single month (January is 1)\n* Array -- An array of either of the above two, or mixed. Basically, anything that can be passed to `Hebcal.GregMonth` (see below).\nIf not provided, it defaults to all of the months in the given `year`.\nIf it is a different type, Hebcal will throw an error.\n\nTo get the full current year:\n\n```js\nvar gregyear = new Hebcal.GregYear();\n```\n\n### `Hebcal.GregYear.prototype.year`\n\nNumber. The year passed to the constructor. (Not actually a prototype value.)\n\n### `Hebcal.GregYear.prototype.months`\n\nArray of `Hebcal.GregMonth`s. Is not intended to be used directly, but rather with the `getMonth()` and `map()` methods. (Not actually a prototype value.)\n\n### `Hebcal.GregYear.prototype.hebyears`\n\nArray of numbers, which Hebrew years are in this Gregorian year. Only includes Hebrew years for the months passed.\n\n### `Hebcal.GregYear.prototype.holidays`\n\nArray of holidays, as `Hebcal.holidays.Event`s, for the represented year. Can be used directly. (Not actually a prototype value.)\n\n### `Hebcal.GregYear.prototype.length`\n\nNumber of days in the year. (Not actually a prototype value.)\n\n### `Hebcal.GregYear.prototype.il`\n\nBoolean get/set. Whether the current location is in Israel or not. This is relevant with regards to holidays.\nThis gets set by `Hebcal.defaultCity`, and `gregyear.setCity()`. It's possible that you may have to set it yourself in certain circumstances. (Not actually a prototype value.)\n\n### `Hebcal.GregYear.prototype.lat` and `long`\n\nNumber get/sets. The latitude and longitude of the current location. This is relevant with regards to getting times for dates. (Not actually prototype values.)\nDefault: 0.\n\n### `Hebcal.GregYear.prototype.isLeapYear()`\n\nReturns a Boolean, takes no arguments.\n\n### `Hebcal.GregYear.prototype.setCity(city)`\n\nFunctions exactly the same as `Hebcal.prototype.setCity(city)`.\n\n### `Hebcal.GregYear.prototype.setLocation(lat, long)`\n\nFunctions exactly the same as `Hebcal.prototype.setLocation(lat, long)`.\n\n### `Hebcal.GregYear.prototype.next()`\n\nReturn a `Hebcal.GregYear` for the following year. Takes 0 arguments.\n\n### `Hebcal.GregYear.prototype.prev()`\n\nReturn a `Hebcal.GregYear` for the preceding year. Takes 0 arguments.\n\n### `Hebcal.GregYear.prototype.getMonth(month)`\n\n```js\nvar jan = year.getMonth(1);\nvar dec = year.getMonth(-1);\nvar sept = year.getMonth('sept');\nvar nextJan = year.getMonth(13);\n```\n\nTakes a single argument, the month to get. Returns `Hebcal.GregMonth` representing the requested month.\n\nIf the month is a positive number, it is a month index.\nIf the month is a negative number, it is a month index from the end of the year.\nIf the month is a string, it should be a month name in English.\n\n### `Hebcal.GregYear.prototype.map(mapFunc[, thisArg])`\n\nFunctions exactly the same as `Hebcal.prototype.map(mapFunc, thisArg)`.\n\n### `Hebcal.GregYear.prototype.addHoliday(event)`\n\nFunctions exactly the same as `Hebcal.prototype.addHoliday(event)`.\n\n## `new Hebcal.GregMonth(month, year)`\n\nThis constructor contains information on a Gregorian month. It is not intended to be directly constructed, but it is fetched by `Hebcal.GregYear.prototype.getMonth()`, so is useful to the end-user. This property was added in Hebcal JS 2.1.\n\n```js\nvar month = new Hebcal.Month(3, 2014); // March\nvar month = new Hebcal.Month('September', 2014); // September\n```\n\n`month` can be a month name or number; `year` must be a number. An error is thrown if one of these conditions is not met.\n\n### `Hebcal.GregMonth.prototype.month`\n\nA number representing the `month` argument to the constructor. (Not actually a prototype value.)\n\n### `Hebcal.GregMonth.prototype.year`\n\nA number representing the `year` argument to the constructor. (Not actually a prototype value.)\n\n### `Hebcal.GregMonth.prototype.days`\n\nAn array of days in the month. Each day is an instance of `Hebcal.HDate`. (Not actually a prototype value.)\n\n### `Hebcal.GregMonth.prototype.length`\n\nNumber; the length of the month. Equivalent to the length of the `days` array. (Not actually a prototype value.)\n\n### `Hebcal.GregMonth.prototype.il`\n\nBoolean get/set. Whether or not the location is in Israel. Is usually set by the parent year. (Not actually a prototype value.)\n\n### `Hebcal.GregMonth.prototype.lat`, `Hebcal.GregMonth.prototype.long`\n\nNumber get/set. Latitude/Longitude of the location. Is usually set by the parent year. (Not actually prototype values.)\n\n### `Hebcal.GregMonth.prototype.__year`\n\nInternal, non-enumerable. A reference to the containing year. Only set if the month was created by a `Hebcal.GregYear()`. (Not actually a prototype value.)\n\n### `Hebcal.GregMonth.prototype.isLeapYear()`\n\nReturns a Boolean, whether or not the year is a leap year.\n\n### `Hebcal.GregMonth.prototype.prev()`\n\nReturns a `Hebcal.GregMonth` representing the previous month.\n\n### `Hebcal.GregMonth.prototype.next()`\n\nReturns a `Hebcal.GregMonth` representing the following month.\n\n### `Hebcal.GregMonth.prototype.getDay(day)`\n\nReturns a `Hebcal.HDate` at a 1-based index in the month. Negative indices are from the end of the month.\n\n### `Hebcal.GregMonth.prototype.getYearObject()`\n\nReturns `this.__year` internal value.\n\n### `Hebcal.GregMonth.prototype.getName()`\n\nReturns a string with the name of the month in English.\n\n### `Hebcal.GregMonth.prototype.map(mapFunc[, thisArg])`\n\nA shortcut for `month.days.map(mapFunc, [thisArg])`.\n\n## Finale\n\nThat's it! You now know everything there is to know about Hebcal JavaScript! Good luck with whatever you choose to do with it!\n\nIf you have any other requests for features, drop me an issue or even a pull request."
}